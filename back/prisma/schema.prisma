// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int            @id @default(autoincrement())
  email        String?        @unique @db.VarChar(50)
  name         String?        @db.VarChar(30)
  nickname     String?        @db.VarChar(15)
  password     String?        @db.VarChar(70)
  snsId        String?        @unique
  provider     String?
  profileImage String?
  post         Post[]
  comment      Comment[]
  wordProgress WordProgress[]
  rank         Rank[]
  pastRank  PastRank[]
  lastRank     Int?           @default(0)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  manager      Boolean        @default(false)
  customBook   CustomBook[]
}

model VerifiCode {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  code      String   @db.VarChar(6)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Word {
  id           Int            @id @default(autoincrement())
  word         String         @unique @db.VarChar(30)
  meaning      String         @db.VarChar(100)
  category     String
  wordProgress WordProgress[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  customBook   CustomBook?    @relation(fields: [customBookId], references: [id], onDelete: Cascade)
  customBookId Int?

  @@index([category, customBookId])
}

model MeaningGroup {
  id       Int      @id @default(autoincrement())
  meanings Json
  createAt DateTime @default(now())
}

model WordProgress {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  word      Word     @relation(fields: [wordId], references: [id], onDelete: Cascade)
  wordId    Int
  correct   Boolean
  studiedAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, wordId, correct])
}

model CustomBook {
  id     Int    @id @default(autoincrement())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  title  String @db.VarChar(20)
  word   Word[]
}

model Rank {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  score     Int      @default(0)
  rankDate  DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PastRank {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  score     Int      @default(0)
  rankDate  DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// 미사용 테이블 (언젠간 쓰것지..)
model Post {
  id        Int       @id @default(autoincrement())
  title     String?
  content   String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  author    User?     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  Int?
  viewCount Int       @default(0)
  comment   Comment[]
}

model Comment {
  id        Int       @id @default(autoincrement())
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  author    User?     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  Int?
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  parent    Comment?  @relation("CommentToComment", fields: [parentId], references: [id], onDelete: Cascade)
  parentId  Int?
  children  Comment[] @relation("CommentToComment")

  @@index([parentId])
}
